        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <time.h>
        -:    7:
        -:    8:
function main called 2 returned 100% blocks executed 94%
        2:    9:int main (int argc, char** argv) {
        -:   10:	struct gameState Game;
        2:   11:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   12:	             sea_hag, tribute, smithy};
        2:   13:    int numberPlayers = 2;
        2:   14:	int currentPlayer = 0;
        -:   15:	int deckSize, handSize, deckPre, deckPost, handPre, handPost, handPostion, discardPre, discardPost, i, j;
        -:   16:	int passed;
        2:   17:	int handFail = 0;
        2:   18:	int deckFail = 0;
        2:   19:	int discardFail = 0;
        2:   20:	int testResult = 0;
        -:   21:    
        2:   22:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        2:   23:	printf("********Running Random Test for Smithy Card********\n");
call    0 returned 100%
    20002:   24:	for(i = 0; i < 10000; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    20000:   25:		initializeGame(numberPlayers, k, 1000, &Game);
call    0 returned 100%
    20000:   26:		deckSize = rand() % (MAX_DECK + 1);
call    0 returned 100%
    20000:   27:		handSize = rand() % (deckSize + 1);
call    0 returned 100%
        -:   28:		
    20000:   29:		Game.deckCount[0] = deckSize - handSize;
    20000:   30:		Game.handCount[0] = handSize;
        -:   31:		
    20000:   32:		handPostion = Game.hand[currentPlayer][Game.handCount[currentPlayer] - 1];
        -:   33:		
    20000:   34:		deckPre = Game.deckCount[0];
    20000:   35:		printf("Deck Count Before: %d\n", deckPre);
call    0 returned 100%
    20000:   36:		handPre = Game.handCount[0];
    20000:   37:		printf("Hand Count Before: %d\n", handPre);
call    0 returned 100%
    20000:   38:		discardPre = Game.playedCardCount;
    20000:   39:		printf("Discarded Cards Before: %d\n", discardPre);
call    0 returned 100%
        -:   40:		
    20000:   41:		smithyCard(currentPlayer, handPostion, &Game);
call    0 returned 100%
        -:   42:		
    20000:   43:		deckPost = Game.deckCount[0];
    20000:   44:		printf("Deck Count After: %d\n", deckPost);
call    0 returned 100%
    20000:   45:		handPost = Game.handCount[0];
    20000:   46:		printf("Hand Count After: %d\n", handPost);
call    0 returned 100%
    20000:   47:		discardPost = Game.playedCardCount;
    20000:   48:		printf("Discarded Cards After: %d\n", discardPost);
call    0 returned 100%
        -:   49:		
    20000:   50:		passed = 1;
        -:   51:		
    20000:   52:		if(handPost != (handPre + 2)){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    19821:   53:			printf("Wrong number of cards were drawn: FAILED!!\n");
call    0 returned 100%
    19821:   54:			handFail++;
    19821:   55:			passed = 0;
        -:   56:		}
        -:   57:		
    20000:   58:		if(deckPost != (deckPre - 3)){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    19821:   59:			printf("Wrong number of cards were removed from player's deck: FAILED!!\n");
call    0 returned 100%
    19821:   60:			deckFail++;
    19821:   61:			passed = 0;
        -:   62:		}
        -:   63:		
    20000:   64:		if(discardPost != (discardPre + 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   65:			printf("Smithy Card was not discarded: FAILED!!\n");
call    0 never executed
    #####:   66:			discardFail++;
    #####:   67:			passed = 0;
        -:   68:		}
        -:   69:			
    20000:   70:		if(passed == 1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      179:   71:			printf("Smithy Card Test PASSED!!\n");
call    0 returned 100%
      179:   72:			testResult++;
        -:   73:		}
        -:   74:	}
        -:   75: 
        2:   76: printf("Number of Tests Passed: %d\n", testResult);
call    0 returned 100%
        2:   77: printf("Incorrect amount in Player's deck: %d\n", deckFail);
call    0 returned 100%
        2:   78: printf("Number of Smithy Cards Drawn to Hand Failed: %d\n", handFail);
call    0 returned 100%
        2:   79: printf("Number of Smithy Cards Discarded Failed: %d\n", discardFail);
call    0 returned 100%
        -:   80: 
        2:   81: return 0;
        -:   82:}
