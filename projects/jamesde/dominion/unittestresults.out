Unittest 1:
UNIT TEST 1 PASSED
Unittest2:
UNIT TEST 2 PASSED
Unittest 3:
UNIT TEST 3 PASSED
Unit Test 4:
UNIT TEST 4 PASSED.
Cardtest 1:
CARD TEST 1 PASSED
Cardtest 2:
CARD TEST 2 PASSED
Cardtest 3:
CARD TEST 3 PASSED
Cardtest 4:
CARD TEST 4 PASSED
File 'unittest1.c'
Lines executed:100.00% of 15
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Test buy Card function 
        1:    8:int main(int argc, char** argv){
        -:    9: struct gameState Game;
        1:   10: int a, random = 0;
        1:   11: int k[10] = {adventurer, gardens, embargo, village, minion, mine, 
        -:   12:              cutpurse,sea_hag, tribute, smithy};
        1:   13: random = rand() % 10;
        -:   14:
        1:   15: a = initializeGame(2, k, random, &Game);
        1:   16: assert(a == 0);
        1:   17: printf("Unittest 1:\n");
        -:   18:
        1:   19: Game.coins = 8;
        1:   20: Game.numBuys = 2;
        -:   21:
        -:   22://Invalid test
        -:   23://Bug is -2 for the supplyPos parameter
        1:   24: a = buyCard(-2, &Game);
        1:   25: assert(a == -1);
        -:   26:
        -:   27://Valid test
        1:   28: a = buyCard(2, &Game);
        1:   29: assert(a == 0);
        -:   30:
        1:   31: printf("UNIT TEST 1 PASSED\n");
        1:   32: return 0;
        -:   33:}
File 'unittest2.c'
Lines executed:100.00% of 15
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Testing end turn function
        1:    8:int main(int argc, char** argv){
        -:    9: struct gameState Game;
        1:   10: int a, random = 0;
        1:   11: int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   12:              sea_hag, tribute, smithy};
        1:   13: random = rand() % 10;
        -:   14:
        1:   15: a = initializeGame(2, k, random, &Game);
        1:   16: assert(a == 0);
        1:   17: printf("Unittest2:\n");
        -:   18:
        1:   19: Game.whoseTurn = 0;
        1:   20: a = endTurn(&Game);
        1:   21: assert(a == 0);
        -:   22:
        1:   23: Game.whoseTurn = 1;
        1:   24: a = endTurn(&Game);
        1:   25: assert(a == 0);
        -:   26:
        1:   27: printf("UNIT TEST 2 PASSED\n");
        1:   28: return 0;
        -:   29:}
File 'unittest3.c'
Lines executed:100.00% of 15
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Test Shuffle function
        1:    8:int main(int argc, char **argv){
        -:    9: struct gameState Game;
        1:   10: int a, random, player = 0;
        1:   11: int k[10] = {adventurer, gardens, embargo, village, minion, mine,
        -:   12:              cutpurse, sea_hag, tribute, smithy};
        1:   13: random = rand() % 10;
        -:   14:
        1:   15: a = initializeGame(2, k, random, &Game);
        1:   16: assert(a == 0);
        1:   17: printf("Unittest 3:\n");
        -:   18:
        -:   19: //Invalid testing
        -:   20: //Bug is -1000 for the deckCount array in struct Game 
        1:   21: Game.deckCount[player] = -1000;
        1:   22: a = shuffle(player, &Game);
        1:   23: assert(a == -1);
        -:   24:
        -:   25://Valid testing   
        1:   26: Game.deckCount[player] = 5;
        1:   27: a = shuffle(player, &Game);
        1:   28: assert(a == 0);
        -:   29: 
        1:   30: printf("UNIT TEST 3 PASSED\n");
        1:   31: return 0;
        -:   32:}
File 'unittest4.c'
Lines executed:100.00% of 12
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Test game over
        1:    8:int main(int argc, char** argv){
        -:    9: struct gameState Game;
        1:   10: int a, random = 0;
        1:   11: int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,      sea_hag, tribute, smithy};
        1:   12: random = rand() % 10;
        -:   13:
        1:   14: a = initializeGame(2, k, random, &Game);
        -:   15:
        -:   16://Test for crashes
        1:   17: assert(a == 0);
        1:   18: printf("Unit Test 4:\n");
        -:   19:
        -:   20://Test for the state of the game.
       22:   21: for(int i = 20; i>= 0; i--){
       21:   22:     Game.supplyCount[i] = i;
       21:   23:     a = isGameOver(&Game);
        -:   24: }
        1:   25: printf("UNIT TEST 4 PASSED.\n");
        1:   26: return 0;
        -:   27:}
File 'cardtest1.c'
Lines executed:100.00% of 13
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Testing adventure card
        1:    8:int main (int argc, char** argv) {
        -:    9: struct gameState Game;
        1:   10: int a, z, random = 0;
        -:   11: int temphand[MAX_HAND];
        1:   12: int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   13: random = rand() % 10;
        -:   14:
        1:   15: a = initializeGame(2, k, random, &Game);
        1:   16: assert(a == 0);
        1:   17: printf("Cardtest 1:\n");
        -:   18:
        -:   19: //Invalid testing 
        1:   20: a = cardEffect(6, 0, 0, 0, &Game, 4, 0);
        1:   21: assert(a == -1);
        -:   22:
        -:   23: //Valid testign
        1:   24: a = adventurerCard(1, temphand, 0, &Game);
        1:   25: assert(a == 0);
        -:   26:
        1:   27: printf("CARD TEST 1 PASSED\n");
        1:   28: return 0;
        -:   29:}
File 'cardtest2.c'
Lines executed:100.00% of 16
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Testing smithy card 
        1:    8:int main(int argc, char** argv){
        -:    9: struct gameState Game;
        1:   10: int a, random = 0;
        1:   11: int k[10] = {adventurer, gardens, embargo, village, minion, mine,
        -:   12:              cutpurse, sea_hag, tribute, smithy};
        1:   13: random = rand() % 10;
        -:   14:
        1:   15: a = initializeGame(2, k, random, &Game);
        1:   16: assert(a == 0);
        1:   17: printf("Cardtest 2:\n");
        -:   18:
        -:   19: //Invalid test but contains no bugs
        1:   20: int card = 4;
        1:   21: int choice1, choice2, choice3, bonus = 0;
        1:   22: int handPos = 4;
        1:   23: a = cardEffect(card, choice1, choice2, choice3, &Game, handPos, bonus);
        1:   24: assert(a == -1); 
        -:   25: 
        -:   26: //Valid test but contains bugs in the refactored smithy function
        1:   27: a = smithyCard(1, handPos, &Game);
        1:   28: assert(a == 0);
        -:   29:
        1:   30: printf("CARD TEST 2 PASSED\n");
        -:   31:
        1:   32: return 0;
        -:   33:}
File 'cardtest3.c'
Lines executed:100.00% of 16
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Test council room card
        1:    8:int main(int argc, char** argv){
        -:    9: struct gameState Game;
        1:   10: int a, random = 0;
        1:   11: int k[10] = {adventurer, gardens, embargo, village, minion, mine,
        -:   12: cutpurse, sea_hag, tribute, smithy};
        1:   13: random = rand() % 10;
        -:   14:
        1:   15: a = initializeGame(2, k, random, &Game);
        1:   16: assert(a == 0);
        1:   17: printf("Cardtest 3:\n");
        -:   18:
        -:   19: //Invalid Input despite correct function
        1:   20: int card = 5;
        1:   21: int choice1, choice2, choice3, bonus = 0;
        1:   22: int handPos = 4;
        1:   23: a = cardEffect(card, choice1, choice2, choice3, &Game, handPos, bonus);
        1:   24: assert(a == -1);
        -:   25:
        -:   26: //Valid Input
        1:   27: a = council_roomCard(1, handPos, &Game);
        1:   28: assert(a == 0);
        -:   29:
        1:   30: printf("CARD TEST 3 PASSED\n");
        1:   31: return 0;
        -:   32:}
File 'cardtest4.c'
Lines executed:100.00% of 16
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Test village Card
        1:    8:int main(int argc, char** argv) {
        -:    9: struct gameState Game;
        1:   10: int a, random = 0;
        1:   11: int k[10] = {adventurer, gardens, embargo, village, minion, mine, 
        -:   12:              cutpurse, sea_hag, tribute, smithy};
        1:   13: random = rand() % 10;
        -:   14:
        1:   15: a = initializeGame(2, k, random, &Game);
        1:   16: assert(a == 0);
        -:   17:
        1:   18: printf("Cardtest 4:\n");
        -:   19:
        -:   20: //Invalid test
        1:   21: int card = 3;
        1:   22: int choice1, choice2, choice3, bonus = 0;
        1:   23: int handPos = 4;
        1:   24: a = cardEffect(card, choice1, choice2, choice3, &Game, handPos, bonus);
        1:   25: assert(a == -1);
        -:   26:
        -:   27:
        -:   28: //Valid test
        1:   29: a = villageCard(1, handPos, &Game);
        1:   30: assert(a == 0);
        -:   31:
        1:   32: printf("CARD TEST 4 PASSED\n"); 
        1:   33: return 0;
        -:   34:}
File 'dominion.c'
Lines executed:20.21% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       62:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       42:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        6:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        6:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        6:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        6:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  576:    state->deckCount[player]--;
        6:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        6:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://Refactored card effects
    #####:  647:int adventurerCard(int currentPlayer, int temphand[], int z, struct gameState *state)
        -:  648:{
        -:  649: int cardDrawn;
    #####:  650: int drawntreasure=0;
        -:  651: //bug allows the player to reveal cards from their deck until they reveal 3 treasure cards
    #####:  652: while(drawntreasure<3){
    #####:  653:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  654:	  shuffle(currentPlayer, state);
        -:  655:	}
    #####:  656:	drawCard(currentPlayer, state);
    #####:  657:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  658:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
    #####:  659:	  drawntreasure++;
        -:  660:        }
        -:  661:	else{
    #####:  662:	  temphand[z]=cardDrawn;
    #####:  663:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:	  z++;
        -:  665:	}
        -:  666:      }
    #####:  667:      while(z-1>=0){
    #####:  668:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:	z=z-1;
        -:  670:      }
    #####:  671:   return 0;
        -:  672:}
        -:  673:
    #####:  674:int smithyCard(int currentPlayer, int handPos, struct gameState *state)
        -:  675:{
        -:  676: int i;
        -:  677://+3 Cards
        -:  678://bug allows the player to add 5 cards to their hand
    #####:  679: for(i = 0; i < 5; i++)
        -:  680: {
    #####:  681: drawCard(currentPlayer, state);
        -:  682: }
        -:  683:
    #####:  684: discardCard(handPos, currentPlayer, state, 0);
    #####:  685: return 0;
        -:  686:}
        -:  687:
    #####:  688:int council_roomCard(int currentPlayer, int handPos, struct gameState *state)
        -:  689:{
        -:  690: //+4 Cards
        -:  691: //bugs draws 5 cards
        -:  692: int i;
    #####:  693:       for (i = 0; i < 5; i++)
        -:  694:       	{
    #####:  695:       	 drawCard(currentPlayer, state);
        -:  696:        }
        -:  697: 		  				
        -:  698:        //+1 Buy
    #####:  699:         state->numBuys++;  		  				            					            			      //Each other player draws a card 
    #####:  700:        for (i = 0; i < state->numPlayers; i++)
        -:  701:        {
    #####:  702:           if ( i != currentPlayer )
        -:  703:           {
    #####:  704: 	     drawCard(i, state);		  				            			            		       }
        -:  705:        }     		  				            			            		  	    	      	    						  				            			            		  	    	      	    				      //put played card in played card pile
    #####:  706: 	  				            			            		  	    	      	    				              discardCard(handPos, currentPlayer, state, 0);
    #####:  707:	return 0;
        -:  708:}
        -:  709:
        1:  710:int villageCard(int currentPlayer, int handPos, struct gameState *state)
        -:  711:{
        -:  712: //+1 Card
        1:  713: drawCard(currentPlayer, state);
        -:  714:
        -:  715:  //+2 Actions
        -:  716:  // bug adds 4 to a player's action count, instead of only 2
        1:  717:    state->numActions = state->numActions + 4;
        -:  718:  //discard played card from hand
        1:  719:    discardCard(handPos, currentPlayer, state, 0);
        1:  720:    return 0;
        -:  721:}
        -:  722:
    #####:  723:int embargoCard(int currentPlayer, int handPos, int choice1, struct gameState *state)
        -:  724:{
        -:  725: //+2 Coins
    #####:  726:  state->coins = state->coins + 2;     			
        -:  727:  //see if selected pile is in play
    #####:  728:  if ( state->supplyCount[choice1] == -1 )
        -:  729:  {
    #####:  730:   return 1;
        -:  731:  }
        -:  732:       			            		  		            //add embargo token to selected supply pile  		
    #####:  733:  state->embargoTokens[choice1]++;      			            		  	
        -:  734: //trash card
    #####:  735: discardCard(handPos, currentPlayer, state, 1);	
    #####:  736:}
        -:  737:
        -:  738:
        1:  739:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  740:{
        -:  741:  int i;
        -:  742:  int j;
        -:  743:  int k;
        -:  744:  int x;
        -:  745:  int index;
        1:  746:  int currentPlayer = whoseTurn(state);
        1:  747:  int nextPlayer = currentPlayer + 1;
        -:  748:
        1:  749:  int tributeRevealedCards[2] = {-1, -1};
        -:  750:  int temphand[MAX_HAND];// moved above the if statement
        1:  751:  int drawntreasure=0;
        -:  752:  int cardDrawn;
        1:  753:  int z = 0;// this is the counter for the temp hand
        1:  754:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  755:    nextPlayer = 0;
        -:  756:  }
        -:  757:  
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
        1:  760:  switch( card ) 
        -:  761:    {
        -:  762:    case adventurer:
    #####:  763:      adventurerCard(currentPlayer, temphand, z, state);
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case council_room:
    #####:  767:      council_roomCard(currentPlayer, handPos, state);		
    #####:  768:      return 0;
        -:  769:			
        -:  770:    case feast:
        -:  771:      //gain card with cost up to 5
        -:  772:      //Backup hand
    #####:  773:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  774:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  775:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  776:      }
        -:  777:      //Backup hand
        -:  778:
        -:  779:      //Update Coins for Buy
    #####:  780:      updateCoins(currentPlayer, state, 5);
    #####:  781:      x = 1;//Condition to loop on
    #####:  782:      while( x == 1) {//Buy one card
    #####:  783:	if (supplyCount(choice1, state) <= 0){
        -:  784:	  if (DEBUG)
        -:  785:	    printf("None of that card left, sorry!\n");
        -:  786:
        -:  787:	  if (DEBUG){
        -:  788:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  789:	  }
        -:  790:	}
    #####:  791:	else if (state->coins < getCost(choice1)){
    #####:  792:	  printf("That card is too expensive!\n");
        -:  793:
        -:  794:	  if (DEBUG){
        -:  795:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  796:	  }
        -:  797:	}
        -:  798:	else{
        -:  799:
        -:  800:	  if (DEBUG){
        -:  801:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  802:	  }
        -:  803:
    #####:  804:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  805:	  x = 0;//No more buying cards
        -:  806:
        -:  807:	  if (DEBUG){
        -:  808:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  809:	  }
        -:  810:
        -:  811:	}
        -:  812:      }     
        -:  813:
        -:  814:      //Reset Hand
    #####:  815:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  816:	state->hand[currentPlayer][i] = temphand[i];
    #####:  817:	temphand[i] = -1;
        -:  818:      }
        -:  819:      //Reset Hand
        -:  820:      			
    #####:  821:      return 0;
        -:  822:			
        -:  823:    case gardens:
    #####:  824:      return -1;
        -:  825:			
        -:  826:    case mine:
    #####:  827:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  828:
    #####:  829:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  830:	{
    #####:  831:	  return -1;
        -:  832:	}
        -:  833:		
    #####:  834:      if (choice2 > treasure_map || choice2 < curse)
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      gainCard(choice2, state, 2, currentPlayer);
        -:  845:
        -:  846:      //discard card from hand
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:
        -:  849:      //discard trashed card
    #####:  850:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  851:	{
    #####:  852:	  if (state->hand[currentPlayer][i] == j)
        -:  853:	    {
    #####:  854:	      discardCard(i, currentPlayer, state, 0);			
    #####:  855:	      break;
        -:  856:	    }
        -:  857:	}
        -:  858:			
    #####:  859:      return 0;
        -:  860:			
        -:  861:    case remodel:
    #####:  862:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  863:
    #####:  864:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  865:	{
    #####:  866:	  return -1;
        -:  867:	}
        -:  868:
    #####:  869:      gainCard(choice2, state, 0, currentPlayer);
        -:  870:
        -:  871:      //discard card from hand
    #####:  872:      discardCard(handPos, currentPlayer, state, 0);
        -:  873:
        -:  874:      //discard trashed card
    #####:  875:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  876:	{
    #####:  877:	  if (state->hand[currentPlayer][i] == j)
        -:  878:	    {
    #####:  879:	      discardCard(i, currentPlayer, state, 0);			
    #####:  880:	      break;
        -:  881:	    }
        -:  882:	}
        -:  883:
        -:  884:
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case smithy:
    #####:  888:      smithyCard(currentPlayer, handPos, state);
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case village:
    #####:  892:      villageCard(currentPlayer, handPos, state);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case baron:
    #####:  896:      state->numBuys++;//Increase buys by 1!
    #####:  897:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  898:	int p = 0;//Iterator for hand!
    #####:  899:	int card_not_discarded = 1;//Flag for discard set!
    #####:  900:	while(card_not_discarded){
    #####:  901:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  902:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  903:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  904:	    state->discardCount[currentPlayer]++;
    #####:  905:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  906:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  907:	    }
    #####:  908:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  909:	    state->handCount[currentPlayer]--;
    #####:  910:	    card_not_discarded = 0;//Exit the loop
        -:  911:	  }
    #####:  912:	  else if (p > state->handCount[currentPlayer]){
        -:  913:	    if(DEBUG) {
        -:  914:	      printf("No estate cards in your hand, invalid choice\n");
        -:  915:	      printf("Must gain an estate if there are any\n");
        -:  916:	    }
    #####:  917:	    if (supplyCount(estate, state) > 0){
    #####:  918:	      gainCard(estate, state, 0, currentPlayer);
    #####:  919:	      state->supplyCount[estate]--;//Decrement estates
    #####:  920:	      if (supplyCount(estate, state) == 0){
    #####:  921:		isGameOver(state);
        -:  922:	      }
        -:  923:	    }
    #####:  924:	    card_not_discarded = 0;//Exit the loop
        -:  925:	  }
        -:  926:			    
        -:  927:	  else{
    #####:  928:	    p++;//Next card
        -:  929:	  }
        -:  930:	}
        -:  931:      }
        -:  932:			    
        -:  933:      else{
    #####:  934:	if (supplyCount(estate, state) > 0){
    #####:  935:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  936:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  937:	  if (supplyCount(estate, state) == 0){
    #####:  938:	    isGameOver(state);
        -:  939:	  }
        -:  940:	}
        -:  941:      }
        -:  942:	    
        -:  943:      
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case great_hall:
        -:  947:      //+1 Card
    #####:  948:      drawCard(currentPlayer, state);
        -:  949:			
        -:  950:      //+1 Actions
    #####:  951:      state->numActions++;
        -:  952:			
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case minion:
        -:  958:      //+1 action
    #####:  959:      state->numActions++;
        -:  960:			
        -:  961:      //discard card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:			
    #####:  964:      if (choice1)		//+2 coins
        -:  965:	{
    #####:  966:	  state->coins = state->coins + 2;
        -:  967:	}
        -:  968:			
    #####:  969:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  970:	{
        -:  971:	  //discard hand
    #####:  972:	  while(numHandCards(state) > 0)
        -:  973:	    {
    #####:  974:	      discardCard(handPos, currentPlayer, state, 0);
        -:  975:	    }
        -:  976:				
        -:  977:	  //draw 4
    #####:  978:	  for (i = 0; i < 4; i++)
        -:  979:	    {
    #####:  980:	      drawCard(currentPlayer, state);
        -:  981:	    }
        -:  982:				
        -:  983:	  //other players discard hand and redraw if hand size > 4
    #####:  984:	  for (i = 0; i < state->numPlayers; i++)
        -:  985:	    {
    #####:  986:	      if (i != currentPlayer)
        -:  987:		{
    #####:  988:		  if ( state->handCount[i] > 4 )
        -:  989:		    {
        -:  990:		      //discard hand
    #####:  991:		      while( state->handCount[i] > 0 )
        -:  992:			{
    #####:  993:			  discardCard(handPos, i, state, 0);
        -:  994:			}
        -:  995:							
        -:  996:		      //draw 4
    #####:  997:		      for (j = 0; j < 4; j++)
        -:  998:			{
    #####:  999:			  drawCard(i, state);
        -: 1000:			}
        -: 1001:		    }
        -: 1002:		}
        -: 1003:	    }
        -: 1004:				
        -: 1005:	}
    #####: 1006:      return 0;
        -: 1007:		
        -: 1008:    case steward:
    #####: 1009:      if (choice1 == 1)
        -: 1010:	{
        -: 1011:	  //+2 cards
    #####: 1012:	  drawCard(currentPlayer, state);
    #####: 1013:	  drawCard(currentPlayer, state);
        -: 1014:	}
    #####: 1015:      else if (choice1 == 2)
        -: 1016:	{
        -: 1017:	  //+2 coins
    #####: 1018:	  state->coins = state->coins + 2;
        -: 1019:	}
        -: 1020:      else
        -: 1021:	{
        -: 1022:	  //trash 2 cards in hand
    #####: 1023:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1024:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1025:	}
        -: 1026:			
        -: 1027:      //discard card from hand
    #####: 1028:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1029:      return 0;
        -: 1030:		
        -: 1031:    case tribute:
    #####: 1032:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1033:	if (state->deckCount[nextPlayer] > 0){
    #####: 1034:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1035:	  state->deckCount[nextPlayer]--;
        -: 1036:	}
    #####: 1037:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1038:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1039:	  state->discardCount[nextPlayer]--;
        -: 1040:	}
        -: 1041:	else{
        -: 1042:	  //No Card to Reveal
        -: 1043:	  if (DEBUG){
        -: 1044:	    printf("No cards to reveal\n");
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:	    
        -: 1049:      else{
    #####: 1050:	if (state->deckCount[nextPlayer] == 0){
    #####: 1051:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1052:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1053:	    state->deckCount[nextPlayer]++;
    #####: 1054:	    state->discard[nextPlayer][i] = -1;
    #####: 1055:	    state->discardCount[nextPlayer]--;
        -: 1056:	  }
        -: 1057:			    
    #####: 1058:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1059:	} 
    #####: 1060:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
    #####: 1063:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1065:	state->deckCount[nextPlayer]--;
        -: 1066:      }    
        -: 1067:		       
    #####: 1068:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1069:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1070:	state->playedCardCount++;
    #####: 1071:	tributeRevealedCards[1] = -1;
        -: 1072:      }
        -: 1073:
    #####: 1074:      for (i = 0; i <= 2; i ++){
    #####: 1075:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1076:	  state->coins += 2;
        -: 1077:	}
        -: 1078:		    
    #####: 1079:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1080:	  drawCard(currentPlayer, state);
    #####: 1081:	  drawCard(currentPlayer, state);
        -: 1082:	}
        -: 1083:	else{//Action Card
    #####: 1084:	  state->numActions = state->numActions + 2;
        -: 1085:	}
        -: 1086:      }
        -: 1087:	    
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case ambassador:
    #####: 1091:      j = 0;		//used to check if player has enough cards to discard
        -: 1092:
    #####: 1093:      if (choice2 > 2 || choice2 < 0)
        -: 1094:	{
    #####: 1095:	  return -1;				
        -: 1096:	}
        -: 1097:
    #####: 1098:      if (choice1 == handPos)
        -: 1099:	{
    #####: 1100:	  return -1;
        -: 1101:	}
        -: 1102:
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1104:	{
    #####: 1105:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1106:	    {
    #####: 1107:	      j++;
        -: 1108:	    }
        -: 1109:	}
    #####: 1110:      if (j < choice2)
        -: 1111:	{
    #####: 1112:	  return -1;				
        -: 1113:	}
        -: 1114:
        -: 1115:      if (DEBUG) 
        -: 1116:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1117:
        -: 1118:      //increase supply count for choosen card by amount being discarded
    #####: 1119:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1120:			
        -: 1121:      //each other player gains a copy of revealed card
    #####: 1122:      for (i = 0; i < state->numPlayers; i++)
        -: 1123:	{
    #####: 1124:	  if (i != currentPlayer)
        -: 1125:	    {
    #####: 1126:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1127:	    }
        -: 1128:	}
        -: 1129:
        -: 1130:      //discard played card from hand
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1132:
        -: 1133:      //trash copies of cards returned to supply
    #####: 1134:      for (j = 0; j < choice2; j++)
        -: 1135:	{
    #####: 1136:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1137:	    {
    #####: 1138:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1139:		{
    #####: 1140:		  discardCard(i, currentPlayer, state, 1);
    #####: 1141:		  break;
        -: 1142:		}
        -: 1143:	    }
        -: 1144:	}			
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case cutpurse:
        -: 1149:
    #####: 1150:      updateCoins(currentPlayer, state, 2);
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1156:		{
    #####: 1157:		  if (state->hand[i][j] == copper)
        -: 1158:		    {
    #####: 1159:		      discardCard(j, i, state, 0);
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		  if (j == state->handCount[i])
        -: 1163:		    {
    #####: 1164:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1165:			{
        -: 1166:			  if (DEBUG)
        -: 1167:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1168:			}	
    #####: 1169:		      break;
        -: 1170:		    }		
        -: 1171:		}
        -: 1172:					
        -: 1173:	    }
        -: 1174:				
        -: 1175:	}				
        -: 1176:
        -: 1177:      //discard played card from hand
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1179:
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
    #####: 1184:      embargoCard(currentPlayer, handPos, choice1, state);
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
        1: 1252:  return -1;
        -: 1253:}
        -: 1254:
        1: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        1: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        1: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        1: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        1: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        1: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
        1: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
    #####: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
    #####: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        1: 1290:  return 0;
        -: 1291:}
        -: 1292:
    #####: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
    #####: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
    #####: 1327:  return 0;
        -: 1328:}
        -: 1329:
        1: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
        1: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
        6: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
        5: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
        3: 1342:	  state->coins += 1;
        -: 1343:	}
        2: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
        2: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
        1: 1355:  state->coins += bonus;
        -: 1356:
        1: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
