        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1741 returned 100% blocks executed 100%
     1741:    8:int compare(const void* a, const void* b) {
     1741:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
      809:   10:    return 1;
      932:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
      292:   12:    return -1;
      640:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 3 returned 100% blocks executed 88%
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
call    0 returned 100%
        3:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        6:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       27:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        9:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       24:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
        -:  145:	}
       48:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        9:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        9:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 51 returned 100% blocks executed 100%
       51:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       51:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       51:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        2:  210:    return -1;
       49:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      757:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      659:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      659:  216:    newDeck[newDeckPos] = state->deck[player][card];
      659:  217:    newDeckPos++;
     3086:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
     2427:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      659:  221:    state->deckCount[player]--;
        -:  222:  }
      708:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      659:  224:    state->deck[player][i] = newDeck[i];
      659:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       49:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 115 returned 100% blocks executed 80%
      115:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      115:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      115:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      115:  243:  if ( state->numActions < 1 )
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
        -:  244:    {
       98:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       17:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
       17:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       17:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       17:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       17:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
       17:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 99 returned 100% blocks executed 79%
       99:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       99:  280:  who = state->whoseTurn;
        -:  281:
       99:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       99:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       99:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       99:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       99:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
       99:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       99:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       99:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 754 returned 100% blocks executed 100%
      754:  311:int numHandCards(struct gameState *state) {
      754:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 1465 returned 100% blocks executed 100%
     1465:  315:int handCard(int handPos, struct gameState *state) {
     1465:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1465:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 198 returned 100% blocks executed 100%
      198:  320:int supplyCount(int card, struct gameState *state) {
      198:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2440 returned 100% blocks executed 100%
     2440:  346:int whoseTurn(struct gameState *state) {
     2440:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 102 returned 100% blocks executed 100%
      102:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      102:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
      652:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      550:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      550:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      102:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      102:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
       52:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       50:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      102:  370:  state->outpostPlayed = 0;
      102:  371:  state->phase = 0;
      102:  372:  state->numActions = 1;
      102:  373:  state->coins = 0;
      102:  374:  state->numBuys = 1;
      102:  375:  state->playedCardCount = 0;
      102:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      612:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      510:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      102:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
      102:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 105 returned 100% blocks executed 82%
      105:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      105:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      102:  401:  j = 0;
     2652:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     2550:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
      102:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
      102:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 6 returned 100% blocks executed 66%
        6:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        6:  420:  int score = 0;
        -:  421:  //score from hand
       21:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  423:    {
       15:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       56:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  434:    {
       50:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       50:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       50:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       50:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
       50:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       50:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       56:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  445:    {
       50:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       50:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       50:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       50:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       50:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       50:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
        6:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 577 returned 100% blocks executed 92%
      577:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      577:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      642:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      599:  534:      state->deck[player][i] = state->discard[player][i];
      599:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       43:  538:    state->deckCount[player] = state->discardCount[player];
       43:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       43:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       43:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       43:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       43:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       43:  559:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
       43:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       43:  563:    state->deckCount[player]--;
       43:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      534:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      534:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      534:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      534:  576:    state->deckCount[player]--;
      534:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      577:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 198 returned 100% blocks executed 23%
      198:  583:int getCost(int cardNumber)
        -:  584:{
      198:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 24%
branch  4 taken 0%
branch  5 taken 34%
branch  6 taken 29%
branch  7 taken 6%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 6%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       48:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       68:  598:      return 3;
        -:  599:    case gold:
       58:  600:      return 6;
        -:  601:    case adventurer:
       12:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
       12:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 17 returned 100% blocks executed 4%
       17:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       17:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       17:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       17:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       17:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       17:  660:  int z = 0;// this is the counter for the temp hand
       17:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
       11:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       17:  667:  switch( card ) 
branch  0 taken 65%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 35%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
       11:  670:      adventuererEffect(state, currentPlayer);
call    0 returned 100%
       11:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
    #####:  674:      councilEffect(state, currentPlayer, handPos);		
call    0 never executed
    #####:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
        -:  678:      //gain card with cost up to 5
        -:  679:      //Backup hand
    #####:  680:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  681:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  682:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  683:      }
        -:  684:      //Backup hand
        -:  685:
        -:  686:      //Update Coins for Buy
    #####:  687:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  688:      x = 1;//Condition to loop on
    #####:  689:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  690:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  691:	  if (DEBUG)
        -:  692:	    printf("None of that card left, sorry!\n");
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  696:	  }
        -:  697:	}
    #####:  698:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  699:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  700:
        -:  701:	  if (DEBUG){
        -:  702:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  703:	  }
        -:  704:	}
        -:  705:	else{
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
    #####:  711:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  712:	  x = 0;//No more buying cards
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  716:	  }
        -:  717:
        -:  718:	}
        -:  719:      }     
        -:  720:
        -:  721:      //Reset Hand
    #####:  722:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  723:	state->hand[currentPlayer][i] = temphand[i];
    #####:  724:	temphand[i] = -1;
        -:  725:      }
        -:  726:      //Reset Hand
        -:  727:      			
    #####:  728:      return 0;
        -:  729:			
        -:  730:    case gardens:
    #####:  731:      return -1;
        -:  732:			
        -:  733:    case mine:
    #####:  734:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  735:
    #####:  736:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  737:	{
    #####:  738:	  return -1;
        -:  739:	}
        -:  740:		
    #####:  741:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  742:	{
    #####:  743:	  return -1;
        -:  744:	}
        -:  745:
    #####:  746:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  747:	{
    #####:  748:	  return -1;
        -:  749:	}
        -:  750:
    #####:  751:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  752:
        -:  753:      //discard card from hand
    #####:  754:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  755:
        -:  756:      //discard trashed card
    #####:  757:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  758:	{
    #####:  759:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  760:	    {
    #####:  761:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  762:	      break;
        -:  763:	    }
        -:  764:	}
        -:  765:			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case remodel:
    #####:  769:	  return remodelEffect(state,currentPlayer, handPos, choice1, choice2);
call    0 never executed
        -:  770:      	
        -:  771:    case smithy:
        -:  772:      
        6:  773:      smithyEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  774:      
        6:  775:      return 0;
        -:  776:		
        -:  777:    case village:
        -:  778:      
    #####:  779:      villageEffect(state,currentPlayer,handPos);
call    0 never executed
        -:  780:      
    #####:  781:      return 0;
        -:  782:		
        -:  783:    case baron:
    #####:  784:      state->numBuys++;//Increase buys by 1!
    #####:  785:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  786:	int p = 0;//Iterator for hand!
    #####:  787:	int card_not_discarded = 1;//Flag for discard set!
    #####:  788:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  789:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  790:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  791:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  792:	    state->discardCount[currentPlayer]++;
    #####:  793:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  794:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  795:	    }
    #####:  796:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  797:	    state->handCount[currentPlayer]--;
    #####:  798:	    card_not_discarded = 0;//Exit the loop
        -:  799:	  }
    #####:  800:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  801:	    if(DEBUG) {
        -:  802:	      printf("No estate cards in your hand, invalid choice\n");
        -:  803:	      printf("Must gain an estate if there are any\n");
        -:  804:	    }
    #####:  805:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  806:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  807:	      state->supplyCount[estate]--;//Decrement estates
    #####:  808:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  809:		isGameOver(state);
call    0 never executed
        -:  810:	      }
        -:  811:	    }
    #####:  812:	    card_not_discarded = 0;//Exit the loop
        -:  813:	  }
        -:  814:			    
        -:  815:	  else{
    #####:  816:	    p++;//Next card
        -:  817:	  }
        -:  818:	}
        -:  819:      }
        -:  820:			    
        -:  821:      else{
    #####:  822:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  824:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  825:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:	    isGameOver(state);
call    0 never executed
        -:  827:	  }
        -:  828:	}
        -:  829:      }
        -:  830:	    
        -:  831:      
    #####:  832:      return 0;
        -:  833:		
        -:  834:    case great_hall:
        -:  835:      //+1 Card
    #####:  836:      drawCard(currentPlayer, state);
call    0 never executed
        -:  837:			
        -:  838:      //+1 Actions
    #####:  839:      state->numActions++;
        -:  840:			
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  843:      return 0;
        -:  844:		
        -:  845:    case minion:
        -:  846:      //+1 action
    #####:  847:      state->numActions++;
        -:  848:			
        -:  849:      //discard card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  851:			
    #####:  852:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  853:	{
    #####:  854:	  state->coins = state->coins + 2;
        -:  855:	}
        -:  856:			
    #####:  857:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  858:	{
        -:  859:	  //discard hand
    #####:  860:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  861:	    {
    #####:  862:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  863:	    }
        -:  864:				
        -:  865:	  //draw 4
    #####:  866:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  867:	    {
    #####:  868:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  869:	    }
        -:  870:				
        -:  871:	  //other players discard hand and redraw if hand size > 4
    #####:  872:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  873:	    {
    #####:  874:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  875:		{
    #####:  876:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  877:		    {
        -:  878:		      //discard hand
    #####:  879:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  880:			{
    #####:  881:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  882:			}
        -:  883:							
        -:  884:		      //draw 4
    #####:  885:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  886:			{
    #####:  887:			  drawCard(i, state);
call    0 never executed
        -:  888:			}
        -:  889:		    }
        -:  890:		}
        -:  891:	    }
        -:  892:				
        -:  893:	}
    #####:  894:      return 0;
        -:  895:		
        -:  896:    case steward:
    #####:  897:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  898:	{
        -:  899:	  //+2 cards
    #####:  900:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  901:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  902:	}
    #####:  903:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  904:	{
        -:  905:	  //+2 coins
    #####:  906:	  state->coins = state->coins + 2;
        -:  907:	}
        -:  908:      else
        -:  909:	{
        -:  910:	  //trash 2 cards in hand
    #####:  911:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  912:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  913:	}
        -:  914:			
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  917:      return 0;
        -:  918:		
        -:  919:    case tribute:
    #####:  920:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  921:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	  state->deckCount[nextPlayer]--;
        -:  924:	}
    #####:  925:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  926:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  927:	  state->discardCount[nextPlayer]--;
        -:  928:	}
        -:  929:	else{
        -:  930:	  //No Card to Reveal
        -:  931:	  if (DEBUG){
        -:  932:	    printf("No cards to reveal\n");
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:	    
        -:  937:      else{
    #####:  938:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  939:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  940:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  941:	    state->deckCount[nextPlayer]++;
    #####:  942:	    state->discard[nextPlayer][i] = -1;
    #####:  943:	    state->discardCount[nextPlayer]--;
        -:  944:	  }
        -:  945:			    
    #####:  946:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  947:	} 
    #####:  948:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  949:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  950:	state->deckCount[nextPlayer]--;
    #####:  951:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  952:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  953:	state->deckCount[nextPlayer]--;
        -:  954:      }    
        -:  955:		       
    #####:  956:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  957:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  958:	state->playedCardCount++;
    #####:  959:	tributeRevealedCards[1] = -1;
        -:  960:      }
        -:  961:
    #####:  962:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  963:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  964:	  state->coins += 2;
        -:  965:	}
        -:  966:		    
    #####:  967:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  968:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  969:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  970:	}
        -:  971:	else{//Action Card
    #####:  972:	  state->numActions = state->numActions + 2;
        -:  973:	}
        -:  974:      }
        -:  975:	    
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case ambassador:
    #####:  979:      j = 0;		//used to check if player has enough cards to discard
        -:  980:
    #####:  981:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
    #####:  986:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  return -1;
        -:  989:	}
        -:  990:
    #####:  991:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  994:	    {
    #####:  995:	      j++;
        -:  996:	    }
        -:  997:	}
    #####:  998:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  return -1;				
        -: 1001:	}
        -: 1002:
        -: 1003:      if (DEBUG) 
        -: 1004:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1005:
        -: 1006:      //increase supply count for choosen card by amount being discarded
    #####: 1007:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1008:			
        -: 1009:      //each other player gains a copy of revealed card
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1013:	    {
    #####: 1014:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1015:	    }
        -: 1016:	}
        -: 1017:
        -: 1018:      //discard played card from hand
    #####: 1019:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1020:
        -: 1021:      //trash copies of cards returned to supply
    #####: 1022:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1029:		  break;
        -: 1030:		}
        -: 1031:	    }
        -: 1032:	}			
        -: 1033:
    #####: 1034:      return 0;
        -: 1035:		
        -: 1036:    case cutpurse:
        -: 1037:
    #####: 1038:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1039:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1040:	{
    #####: 1041:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1042:	    {
    #####: 1043:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:		{
    #####: 1045:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1046:		    {
    #####: 1047:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1048:		      break;
        -: 1049:		    }
    #####: 1050:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1051:		    {
    #####: 1052:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1053:			{
        -: 1054:			  if (DEBUG)
        -: 1055:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1056:			}	
    #####: 1057:		      break;
        -: 1058:		    }		
        -: 1059:		}
        -: 1060:					
        -: 1061:	    }
        -: 1062:				
        -: 1063:	}				
        -: 1064:
        -: 1065:      //discard played card from hand
    #####: 1066:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1067:
    #####: 1068:      return 0;
        -: 1069:
        -: 1070:		
        -: 1071:    case embargo: 
        -: 1072:      //+2 Coins
    #####: 1073:      state->coins = state->coins + 2;
        -: 1074:			
        -: 1075:      //see if selected pile is in play
    #####: 1076:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:			
        -: 1081:      //add embargo token to selected supply pile
    #####: 1082:      state->embargoTokens[choice1]++;
        -: 1083:			
        -: 1084:      //trash card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1086:      return 0;
        -: 1087:		
        -: 1088:    case outpost:
        -: 1089:      //set outpost flag
    #####: 1090:      state->outpostPlayed++;
        -: 1091:			
        -: 1092:      //discard card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case salvager:
        -: 1097:      //+1 buy
    #####: 1098:      state->numBuys++;
        -: 1099:			
    #####: 1100:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
        -: 1102:	  //gain coins equal to trashed card
    #####: 1103:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1104:	  //trash card
    #####: 1105:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1106:	}
        -: 1107:			
        -: 1108:      //discard card
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case sea_hag:
    #####: 1113:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1114:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1115:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1116:	  state->discardCount[i]++;
    #####: 1117:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1118:	}
        -: 1119:      }
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case treasure_map:
        -: 1123:      //search hand for another treasure_map
    #####: 1124:      index = -1;
    #####: 1125:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:	{
    #####: 1127:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1128:	    {
    #####: 1129:	      index = i;
    #####: 1130:	      break;
        -: 1131:	    }
        -: 1132:	}
    #####: 1133:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
        -: 1135:	  //trash both treasure cards
    #####: 1136:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1137:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1138:
        -: 1139:	  //gain 4 Gold cards
    #####: 1140:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	    {
    #####: 1142:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1143:	    }
        -: 1144:				
        -: 1145:	  //return success
    #####: 1146:	  return 1;
        -: 1147:	}
        -: 1148:			
        -: 1149:      //no second treasure_map found in hand
    #####: 1150:      return -1;
        -: 1151:    }
        -: 1152:	
    #####: 1153:  return -1;
        -: 1154:}
        -: 1155:
function discardCard called 6 returned 100% blocks executed 78%
        6: 1156:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1157:{
        -: 1158:	
        -: 1159:  //if card is not trashed, added to Played pile 
        6: 1160:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1161:    {
        -: 1162:      //add card to played pile
        6: 1163:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1164:      state->playedCardCount++;
        -: 1165:    }
        -: 1166:	
        -: 1167:  //set played card to -1
        6: 1168:  state->hand[currentPlayer][handPos] = -1;
        -: 1169:	
        -: 1170:  //remove card from player's hand
        6: 1171:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1172:    {
        -: 1173:      //reduce number of cards in hand
    #####: 1174:      state->handCount[currentPlayer]--;
        -: 1175:    }
        6: 1176:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1177:    {
        -: 1178:      //reduce number of cards in hand
    #####: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:  else 	
        -: 1182:    {
        -: 1183:      //replace discarded card with last card in hand
        6: 1184:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1185:      //set last card to -1
        6: 1186:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1187:      //reduce number of cards in hand
        6: 1188:      state->handCount[currentPlayer]--;
        -: 1189:    }
        -: 1190:	
        6: 1191:  return 0;
        -: 1192:}
        -: 1193:
function gainCard called 99 returned 100% blocks executed 70%
       99: 1194:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1195:{
        -: 1196:  //Note: supplyPos is enum of choosen card
        -: 1197:	
        -: 1198:  //check if supply pile is empty (0) or card is not used in game (-1)
       99: 1199:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1200:    {
    #####: 1201:      return -1;
        -: 1202:    }
        -: 1203:	
        -: 1204:  //added card for [whoseTurn] current player:
        -: 1205:  // toFlag = 0 : add to discard
        -: 1206:  // toFlag = 1 : add to deck
        -: 1207:  // toFlag = 2 : add to hand
        -: 1208:
       99: 1209:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1210:    {
    #####: 1211:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1212:      state->deckCount[player]++;
        -: 1213:    }
       99: 1214:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1215:    {
    #####: 1216:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1217:      state->handCount[player]++;
        -: 1218:    }
        -: 1219:  else
        -: 1220:    {
       99: 1221:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       99: 1222:      state->discardCount[player]++;
        -: 1223:    }
        -: 1224:	
        -: 1225:  //decrease number in supply pile
       99: 1226:  state->supplyCount[supplyPos]--;
        -: 1227:	 
       99: 1228:  return 0;
        -: 1229:}
        -: 1230:
function updateCoins called 122 returned 100% blocks executed 100%
      122: 1231:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1232:{
        -: 1233:  int i;
        -: 1234:	
        -: 1235:  //reset coin count
      122: 1236:  state->coins = 0;
        -: 1237:
        -: 1238:  //add coins for each Treasure card in player's hand
      772: 1239:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1240:    {
      650: 1241:      if (state->hand[player][i] == copper)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 1242:	{
      310: 1243:	  state->coins += 1;
        -: 1244:	}
      340: 1245:      else if (state->hand[player][i] == silver)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -: 1246:	{
      124: 1247:	  state->coins += 2;
        -: 1248:	}
      216: 1249:      else if (state->hand[player][i] == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1250:	{
       53: 1251:	  state->coins += 3;
        -: 1252:	}	
        -: 1253:    }	
        -: 1254:
        -: 1255:  //add bonus
      122: 1256:  state->coins += bonus;
        -: 1257:
      122: 1258:  return 0;
        -: 1259:}
        -: 1260:
function adventuererEffect called 11 returned 100% blocks executed 93%
       11: 1261:void adventuererEffect(struct gameState *state, int currentPlayer)
        -: 1262:{
       11: 1263:	int z = 0;
        -: 1264:	int cardDrawn;
       11: 1265:	int drawntreasure = 0; 
        -: 1266:	int temphand[MAX_HAND];
        -: 1267:	
       50: 1268:	while(drawntreasure<2){
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
       28: 1269:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        2: 1270:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1271:	}
       28: 1272:	drawCard(currentPlayer, state);
call    0 returned 100%
       28: 1273:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       28: 1274:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       22: 1275:	  drawntreasure++;
        -: 1276:	else{
        6: 1277:	  temphand[z]=cardDrawn;
        6: 1278:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1279:	}
        -: 1280:      }
       22: 1281:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1282:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1283:	z=z-1;
        -: 1284:      }
       11: 1285:}
        -: 1286:
function councilEffect called 0 returned 0% blocks executed 0%
    #####: 1287:void councilEffect(struct gameState *state, int currentPlayer, int handPos)
        -: 1288:{
        -: 1289:	int i;
        -: 1290:	//+4 Cards
    #####: 1291:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1292:	{
    #####: 1293:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1294:	}
        -: 1295:			
        -: 1296:      //+1 Buy
    #####: 1297:      state->numBuys++;
        -: 1298:			
        -: 1299:      //Each other player draws a card
    #####: 1300:    for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1301:	{
    #####: 1302:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1303:	    {
    #####: 1304:	      drawCard(i, state);
call    0 never executed
        -: 1305:	    }
        -: 1306:	}
        -: 1307:			
        -: 1308:    //put played card in played card pile
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1310:
    #####: 1311:}
        -: 1312:
function remodelEffect called 0 returned 0% blocks executed 0%
    #####: 1313:int remodelEffect(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1314:{
        -: 1315:	int i;
    #####: 1316:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1317:
    #####: 1318:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1319:	{
    #####: 1320:	  return -1;
        -: 1321:	}
        -: 1322:
    #####: 1323:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1324:
        -: 1325:      //discard card from hand
    #####: 1326:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1327:
        -: 1328:      //discard trashed card
    #####: 1329:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1330:	{
    #####: 1331:	  if (state->hand[currentPlayer][i] = j)
branch  0 never executed
branch  1 never executed
        -: 1332:	    {
    #####: 1333:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1334:	      break;
        -: 1335:	    }
        -: 1336:	}
        -: 1337:	
    #####: 1338:	return 0;
        -: 1339:}
        -: 1340:
function smithyEffect called 6 returned 100% blocks executed 100%
        6: 1341:void smithyEffect(struct gameState *state, int currentPlayer, int handPos)
        -: 1342:{
        -: 1343:	int i;
        -: 1344:	
        -: 1345:	//+3 Cards
       30: 1346:    for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1347:	{
       24: 1348:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1349:	}
        -: 1350:			
        -: 1351:    //discard card from hand
        6: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6: 1353:}
        -: 1354:
function villageEffect called 0 returned 0% blocks executed 0%
    #####: 1355:void villageEffect(struct gameState *state, int currentPlayer, int handPos)
        -: 1356:{
        -: 1357:	  //+1 Card
    #####: 1358:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1359:			
        -: 1360:      //+2 Actions
    #####: 1361:      state->numActions = state->numActions + 2;
        -: 1362:			
        -: 1363:      //discard played card from hand
    #####: 1364:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1365:}
        -: 1366:
        -: 1367:
        -: 1368://end of dominion.c
