        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <time.h>
        -:    7:
function main called 1 returned 100% blocks executed 95%
        1:    8:int main (int argc, char** argv) {
        -:    9:	struct gameState Game;
        1:   10:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   11:	             sea_hag, tribute, smithy};
        1:   12:    int numberPlayers = 2;
        1:   13:	int currentPlayer = 0;
        1:   14:	int otherPlayer = 1;
        -:   15:	int deckSize, handSize, deckPre, deckPost, handPre, handPost, handPostion, discardPre, discardPost, i, j;
        -:   16:	int testNumAct, passed;
        1:   17:	int handFail = 0;
        1:   18:	int deckFail = 0;
        1:   19:	int handFail2 = 0;
        1:   20:	int deckFail2 = 0;
        1:   21:	int numActionsFail = 0;
        1:   22:	int testResult = 0;
        -:   23:	int deckPre2, handPre2, deckPost2, handPost2, handPostion2;
        -:   24:	
        -:   25:	
        1:   26:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   27:	printf("********Running Random Test for Council Room Card********\n");
call    0 returned 100%
    10001:   28:	for(i = 0; i < 10000; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10000:   29:		initializeGame(numberPlayers, k, 1000, &Game);
call    0 returned 100%
    10000:   30:		deckSize = rand() % (MAX_DECK + 1);
call    0 returned 100%
    10000:   31:		handSize = rand() % (deckSize + 1);
call    0 returned 100%
        -:   32:		
    10000:   33:		Game.deckCount[0] = deckSize - handSize;
    10000:   34:		Game.handCount[0] = handSize;
        -:   35:		
    10000:   36:		Game.deckCount[1] = deckSize - handSize;
    10000:   37:		Game.handCount[1] = handSize;
        -:   38:		
    10000:   39:		handPostion = Game.hand[currentPlayer][Game.handCount[currentPlayer] - 1];
    10000:   40:		handPostion2 = Game.hand[otherPlayer][Game.handCount[otherPlayer] - 1];
        -:   41:		
    10000:   42:		deckPre = Game.deckCount[0];
    10000:   43:		printf("Deck Count Before for Player 1: %d\n", deckPre);
call    0 returned 100%
    10000:   44:		handPre = Game.handCount[0];
    10000:   45:		printf("Hand Count Before for Player 1: %d\n", handPre);
call    0 returned 100%
        -:   46:		
    10000:   47:		deckPre2 = Game.deckCount[1];
    10000:   48:		printf("Deck Count Before for Player 2: %d\n", deckPre2);
call    0 returned 100%
    10000:   49:		handPre2 = Game.handCount[1];
    10000:   50:		printf("Hand Count Before for Player 2: %d\n", handPre2);
call    0 returned 100%
        -:   51:		
        -:   52:		
        -:   53:                //My refactor function
        -:   54:                //council_roomCard(currentPlayer, handPostion, &Game);
        -:   55:                //Classmate refactor function 
    10000:   56:		councilEffect(&Game, currentPlayer, handPostion);
call    0 returned 100%
        -:   57:		
    10000:   58:		deckPost = Game.deckCount[0];
    10000:   59:		printf("Deck Count After for Player 1: %d\n", deckPost);
call    0 returned 100%
    10000:   60:		handPost = Game.handCount[0];
    10000:   61:		printf("Hand Count After for Player 1: %d\n", handPost);
call    0 returned 100%
        -:   62:		
    10000:   63:		deckPost2 = Game.deckCount[1];
    10000:   64:		printf("Deck Count Before for Player 2: %d\n", deckPost2);
call    0 returned 100%
    10000:   65:		handPost2 = Game.handCount[1];
    10000:   66:		printf("Hand Count Before for Player 2: %d\n", handPost2);
call    0 returned 100%
        -:   67:	
    10000:   68:	    passed = 1;
        -:   69:		
    10000:   70:		if(handPost != (handPre + 3)){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
      447:   71:			printf("Wrong number of cards were drawn: FAILED!!\n");
call    0 returned 100%
      447:   72:			handFail++;
      447:   73:			passed = 0;
        -:   74:		}
        -:   75:		
    10000:   76:		if(deckPost != (deckPre - 4)){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
      447:   77:			printf("Wrong number of cards were removed from player 1's deck: FAILED!!\n");
call    0 returned 100%
      447:   78:			deckFail++;
      447:   79:			passed = 0;
        -:   80:		}
        -:   81:		
        -:   82:		
    10000:   83:		if(handPost2 != (handPre2 + 3)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10000:   84:			printf("Wrong number of cards were drawn: FAILED!!\n");
call    0 returned 100%
    10000:   85:			handFail2++;
    10000:   86:			passed = 0;
        -:   87:		}
        -:   88:		
    10000:   89:		if(deckPost2 != (deckPre2 - 4)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10000:   90:			printf("Wrong number of cards were removed from player 2's deck: FAILED!!\n");
call    0 returned 100%
    10000:   91:			deckFail2++;
    10000:   92:			passed = 0;
        -:   93:			
        -:   94:		}
        -:   95:		
        -:   96:			
    10000:   97:		if(passed == 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   98:			printf("Council Room Card Test PASSED!!\n");
call    0 never executed
    #####:   99:			testResult++;
        -:  100:		}
        -:  101:	
        -:  102:	}
        1:  103:	printf("Number of Tests Passed: %d\n", testResult);
call    0 returned 100%
        1:  104:	printf("Incorrect amount in Player 1's deck: %d\n", deckFail);
call    0 returned 100%
        1:  105:	printf("Incorrect amount in Player 2's deck: %d\n", deckFail2);
call    0 returned 100%
        1:  106:	printf("Number of Council Room Cards Drawn to Player 1's Hand Failed: %d\n", handFail);
call    0 returned 100%
        1:  107:	printf("Number of Council Room Cards Drawn to Player 2's Hand Failed: %d\n", handFail2);
call    0 returned 100%
        -:  108:	
        1:  109:	return 0;
        -:  110:}
